/*
    if cache hits
        if LRU[vpn] doesnt exist in LRU because of past deletes 
            iterate to find smallest acccess time and delete it 
        if LRU[vpn] does have a value, update LRU
    If cache misses
        if in page table
            if TLB is full
                iterate to find smallest access time and delete from LRU and TLB
            else 
                if TLB is not full but LRU is full
                    iterate to find the smallest access time and delete it from LRU
                else (TLB and LRU are not full)
                    enter in access time and frame number
        if not in page table
            insert address
            if TLB is full
                iterate to find smallest access time and delete it from LRU and TLB
            else 
                if TLB is not full but LRU is full
                    iterate to find the smallest access time and delete it from LRU
                else (TLB and LRU are not full)
                    enter in access time and frame number
    */

     /*
    keep track of frame in main, before while loop set frame = 0
    everytime you insert an address tp the pagetable, add 1 to the frame and send that new frame with address to insert function
    because if the vpn is already in the pagetable the final node will be holding the frame
    i return pow(2,32)-1 as my way of returning false meaning this cur vpn hasnt been inserted into the page table yet
    before you insert, you search the pagetable incase the same vpn shows up again on another address
    
   If my search doesn’t find the VPN, Then I’ll insert it
    And then in that insert I’ll send down the page table frame count along with it
    When the page inserts it creates a new level, And when I create a level if it’s the bottom level(or leaf node) 
    then I’ll create an array of maps and set the frame count to whatever index the VPN is for the last level
   */


   // PageTable struct should hold all the information about how we should populate our page table
// Each Level should point back to the PageTable and the PageTable should point to the root
// Level should be a different structure that gets created per the specifications (bits, etc) depending on which depth the new Level we are creating is
class PageTable{
    public:
        Level* root;
        int LevelCount;
        uint32_t *bytesCounter; 
        uint32_t *BitmaskAry;
        uint32_t *ShiftAry;
        uint32_t *EntryCount; 


        PageTable(){
            root = new Level();     
        }

        unsigned int virtualAddressToPageNum(unsigned int virtualAddress, int index){
            unsigned temp = virtualAddress & BitmaskAry[index];
            temp = temp >> ShiftAry[index];
            return temp;
        }

        // void pageInsert(uint32_t *pageList, address, uint32_t frame)
        void pageInsert(uint32_t *pageList, uint32_t frame) {   // pass in either levelPtr or pageTablePtr
            Level* current = root;                                      // Find index into current page level
            for (int index = 0; index < LevelCount; index++){
                if (current->children.find(pageList[index]) == current->children.end()) {
                    bytesCounter[index]++;
                    current->children[pageList[index]] = new Level();
                }
                current = current->children[pageList[index]];
            }
            current->map[pageList[LevelCount-1]] = frame,      // current->frame = frame;
            current->leaf = true;
        }

        uint32_t search(uint32_t *pageList){
            Level* current = root;
            for (int index = 0; index < LevelCount; index++){
                if (current->children.find(pageList[index]) == current->children.end()) {
                    return pow(2, MAXNUMOFBITS) - 1;
                }
                current = current->children[pageList[index]];
            }
            if (current->leaf){
                return current->map[pageList[LevelCount-1]]; // current->frame;
            }
            return pow(2, MAXNUMOFBITS) - 1;
        }

    private:
        class Level* rootNodePtr;
};

// set depth to 0, have it point back to the PageTable, allocate an array of 256 (2^8) pointers to Level structures
// - initialize all to NULL (number of level 1 entries)
// - if this had been a 1 level page table we would have allocated map structures instead of pointers to Levels
class Level{
    public:
        bool leaf;
        unordered_map<unsigned int, Level*> children;             // contains virtual address and *PageNode (next level)
        unordered_map<uint32_t, int> map;                         // contains virtual address and frame
        int depth;

        Level() {
            leaf = false;
            // nextLevel = new *pointers[EntryCount[depth]];
            // remember to only allocate the nextLevel array for internal levels. The leaf ones use the map array
            new Level*[this->pageTablePtr->EntryCount[this->depth]];
        }

    private:
        class PageTable* pageTablePtr;  // could also pass this pointer back into the level constructor as argument
};





TLB UPDATE:

// iterate to find smallest access time and delete it from LRU and TLB   
                        int smallestAccessTime = INT_MAX;
                        unsigned int virtualKey;
                        unordered_map<unsigned int, int>::iterator it = LRU.begin();   // declare iterator
                        while (it != LRU.end()){
                            if (smallestAccessTime > it->second){
                                smallestAccessTime = it->second;
                                virtualKey = it->first;
                            }
                            it++;
                        }
                        // if TLB is full
                        if (TLB.size() == TLBCacheCapacity){
                            TLB.erase(virtualKey);
                            // LRU and TLB get new frame number and access time
                            LRU.erase(virtualKey);
                            LRU[vpn] = count;
                            TLB[vpn] = pageTable->search(pageList);                                      
                        }
                        // if TLB is not full but LRU is full  
                        else if (LRU.size() == LRU_LIMIT){
                            // LRU and TLB get new frame number and access time
                            LRU.erase(virtualKey);
                            LRU[vpn] = count;
                            TLB[vpn] = pageTable->search(pageList);                                  
                        }
                        // else (TLB and LRU are not full)
                        else{
                            // enter in access time and frame number
                            LRU[vpn] = pageTable->search(pageList);
                            TLB[vpn] = count;
                        }